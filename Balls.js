// code modified from Nicholas at http://philogb.github.io/blog/2010/12/10/animating-isosurfaces-with-webgl-and-workers/

var gtp = [
   [-7.3260,   -1.9960,    0.0260 ],
   [-6.2850,   -2.9820,    2.1030 ],
   [-5.2960,   -3.4630,   -0.2860 ],
   [-5.1010,   -1.0580,    0.7580 ],
   [-4.8180,    0.2060,   -0.1990 ],
   [-4.7320,   -0.2500,   -1.6050 ],
   [-6.0170,    1.2690,   -0.0520 ],
   [-3.4290,    0.9000,    0.2260 ],
   [-2.4490,    1.9650,   -0.4790 ],
   [-2.3500,    1.6620,   -1.9250 ],
   [-3.0400,    3.4500,   -0.2820 ],
   [-0.9880,    1.8760,    0.1900 ],
   [ 0.1340,    2.6220,   -0.2870 ],
   [ 1.3600,    2.3040,    0.5700 ],
   [ 1.7490,    0.9330,    0.3780 ],
   [ 2.5480,    3.1820,    0.1320 ],
   [ 2.9940,    3.9970,    1.2180 ],
   [ 3.6450,    2.1660,   -0.2690 ],
   [ 4.9290,    2.5930,    0.1900 ],
   [ 3.1880,    0.8860,    0.4760 ],
   [ 3.7110,   -0.3110,   -0.1880 ],
   [ 3.0940,   -1.0210,   -1.1760 ],
   [ 3.8430,   -2.0230,   -1.5330 ],
   [ 4.9810,   -2.0170,   -0.7980 ],
   [ 6.1290,   -2.8420,   -0.7530 ],
   [ 6.2350,   -3.8070,   -1.4910 ],
   [ 7.1060,   -2.5350,    0.1290 ],
   [ 6.9780,   -1.4540,    0.9500 ],
   [ 7.9860,   -1.1650,    1.8350 ],
   [ 5.9160,   -0.6790,    0.9170 ],
   [ 4.9110,   -0.9180,    0.0660 ],
   [-6.8380,   -3.7750,    2.1060 ],
   [-4.4390,   -3.7530,    0.0550 ],
   [-6.1320,    1.6110,    0.8460 ],
   [-3.1330,    3.7170,    0.6430 ],
   [ 0.3350,    2.3520,   -1.3240 ],
   [-0.0860,    3.6880,   -0.2260 ],
   [ 1.1330,    2.4800,    1.6210 ],
   [ 2.2700,    3.8030,   -0.7200 ],
   [ 3.7410,    4.5710,    0.9980 ],
   [ 3.6520,    2.0070,   -1.3470 ],
   [ 5.2180,    3.4380,   -0.1800 ],
   [ 3.5030,    0.9160,    1.5190 ],
   [ 2.1280,   -0.7860,   -1.5990 ],
   [ 7.9030,   -3.0860,    0.1790 ],
   [ 8.7760,   -1.7280,    1.8700 ],
   [ 7.9090,   -0.3990,    2.4250 ],

   ];
var epi = [
  [-2.6580,   -1.8170,   -0.2170], 
  [ -1.7760,   -0.7860,   -0.1240],
  [ -0.4240,   -1.0080,   -0.3330],
  [ -2.2300,    0.4950,    0.1760],
  [ -3.5560,    0.7190,    0.3770],
  [ -1.3270,    1.5420,    0.2700],
  [  0.0210,    1.3130,    0.0660],
  [  0.4710,    0.0420,   -0.2370],
  [  1.9410,   -0.2010,   -0.4650],
  [  2.5180,    0.9380,   -1.1070],
  [  2.6330,   -0.4350,    0.8790],
  [  4.0660,   -0.6720,    0.6570],
  [ -3.0150,   -1.9500,   -1.1060],
  [ -0.0700,   -2.0000,   -0.5700],
  [ -3.8370,    0.6180,    1.2970],
  [ -1.6770,    2.5370,    0.5020],
  [  0.7240,    2.1300,    0.1390],
  [  2.0700,   -1.0790,   -1.0980],
  [  2.4400,    1.7570,   -0.5990],
  [  2.5040,    0.4430,    1.5120],
  [  2.1930,   -1.3040,    1.3680],
  [  4.4840,    0.0920,    0.1470],
  [  4.5460,   -0.8290,    1.5310],
  ];

  var caf = [[ 1.0470*2,   -0.0000*2,   -1.3120*2],  
  [-0.2080*2,   -0.0000*2,   -1.7900*2],  
  [ 2.1760*2,    0.0000*2,   -2.2460*2],  
  [ 1.2850*2,   -0.0010*2,    0.0160*2],  
  [-1.2760*2,   -0.0000*2,   -0.9710*2],  
  [-0.3840*2,    0.0000*2,   -2.9930*2],  
  [-2.6290*2,   -0.0000*2,   -1.5330*2],  
  [-1.0980*2,   -0.0000*2,    0.4020*2],  
  [ 0.1930*2,    0.0050*2,    0.9110*2],  
  [-1.9340*2,   -0.0000*2,    1.4440*2],  
  [ 2.4280*2,   -0.0000*2,    0.4370*2],  
  [ 0.0680*2,   -0.0000*2,    2.2860*2],  
  [-1.2510*2,   -0.0000*2,    2.5600*2],  
  [ 1.1610*2,   -0.0000*2,    3.2610*2]];


 
function Balls(energy, grid, input) {
  var ballsArray = this.ballsArray = [];
  this.grid = grid;
  this.radius = 10;
  this.energy = energy; 
  this.atoms = input;
  var rand = Math.random,
      x = grid.x,
      xfrom = x.from,
      xto = x.to,
      y = grid.y,
      yfrom = y.from,
      yto = y.to,
      z = grid.z,
      zfrom = z.from,
      zto = z.to;
  
  for (var i = 0; i < this.atoms.length; i++) {
    ballsArray.push({
      pos: {
        x: this.atoms[i][0],
        y: this.atoms[i][1],
        z: this.atoms[i][2],
      },
      vec: {
        x: (2 * rand() -1) * (xto - xfrom) ,
        y: (2 * rand() -1) * (yto - yfrom) ,
        z: (2 * rand() -1) * (zto - zfrom) 
      }
    });
  }
  /*for (var i = 0; i < n; i++) {
    ballsArray.push({
      pos: {
        x: (xfrom + rand() * (xto - xfrom)) / 1.5,
        y: (yfrom + rand() * (yto - yfrom)) / 1.5,
        z: (zfrom + rand() * (zto - zfrom)) / 1.5
      },
      vec: {
        x: (2 * rand() -1) * (xto - xfrom) / 80,
        y: (2 * rand() -1) * (yto - yfrom) / 80,
        z: (2 * rand() -1) * (zto - zfrom) / 80
      }
    });
  }*/
}

Balls.prototype= {
  update: function(energy) {
    var balls = this.ballsArray,
        grid = this.grid;
   

    for (var i = 0, l = balls.length; i < l; i++) {
      var ball = balls[i],
          pos = ball.pos,
          vec = ball.vec;

      
        
        var nxt_pos = [this.atoms[i][0]-pos.x, this.atoms[i][1]-pos.y, this.atoms[i][2]-pos.z];
        var dist = Math.sqrt(nxt_pos[0]*nxt_pos[0]+nxt_pos[1]*nxt_pos[1]+nxt_pos[2]*nxt_pos[2]);
        
        if (dist > this.radius && dist <= 2*this.radius){
          vec.x *= -1;
          vec.y *= -1;
          vec.z *= -1;
        }
        nxt_pos = [pos.x+vec.x/energy, pos.y+vec.y/energy, pos.z+vec.z/energy];
        pos.x = nxt_pos[0]; pos.y = nxt_pos[1]; pos.z = nxt_pos[2];
        if (dist >= 2*this.radius) {
          pos.x = this.atoms[i][0]; pos.y = this.atoms[i][1]; pos.z = this.atoms[i][2];
        }
    
    }
  },
  
  each: function(callback) {
    var balls = this.ballsArray;
    for (var i = 0, l = balls.length; i < l; i++) {
      callback(balls[i], i);
    }
  }
};
